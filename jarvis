#!/usr/bin/env ruby
# encoding: UTF-8
require "rubygems"
require "thor"
require "set"
require "pathname"

class Jarvis < Thor
  include Thor::Actions
  source_root Dir.pwd
  TODO_MATCHER = /\[todo(.*)/i
  class_option :afc_path, :type => :string, :default => File.expand_path('book')

  desc "draft NAME", "generates a new draft"
  def draft(name)
    create_file "drafts/#{name}.css"
    copy_file "template/index.html", "drafts/#{name}.html"

    stylesheet_tag = %Q{<link rel="stylesheet" href="#{name}.css">\n    }
    insert_into_file "drafts/#{name}.html", stylesheet_tag, :before => '<script src="prefixfree.min.js"></script>'
  end

  desc "lint", "Checks for possible errors on the build."
  def lint
    @ok = true
    check_references
    check_file_clashing
    check_code_length
    check_encoding
    raise Thor::Error, "afc syntax errors (see above)" if not @ok
  end

  desc "indices", "Counts the existing indices."
  def indices
    each_chapter do |chapter, path|
      contents = File.read(path)
      say_status chapter.rjust(20), contents.scan(/^\[index/).size
    end
  end

  desc "todo", "Prints the current TODOs on the code."
  def todo
    each_chapter do |chapter, path|
      file = File.new(path)
      file.each do |line|
        if line =~ TODO_MATCHER
          say_status "#{chapter} -> #{file.lineno}", $1.strip.chop
        end
      end
    end
  end

  desc "rename [CHAPTER]", "Rename exported images by photoshop on the given chapter."
  def rename(chapter)
    folder = File.expand_path("resources/#{chapter}")
    files  = Dir["#{folder}/**/*.jpg"].select { |file| File.basename(file) =~ /\A_\d{4}_/ }

    files.each do |file|
      sanitized = file.gsub(/_\d{4}_/, '')
      say_status "moving", "#{File.basename(file)}"
      FileUtils.mv(file, sanitized)
    end
  end

  protected
  def each_chapter
    return to_enum :each_chapter unless block_given?
    Dir.glob("#{afc_path}/**/*.afc").each do |path|
      chapter = File.basename(path).gsub(/\d{2}-|\.afc/, "")
      yield chapter, path
    end
  end

  def check_code_length(limit = 73)
    say "Checking code lines bigger than #{limit}..."
    each_chapter do |chapter, path|
      lines = File.read(path).scan(/\[code\S*\s*\S*\][\S\s]*?\[\/code\]/m).map do |block|
        block.gsub(/\[code\S*\s*\S*\]|\[\/code\]/, '').split("\n")
      end.flatten

      lines = lines.select { |l| l.length > limit }.sort_by(&:length)
      next if lines.empty?

      say_status chapter, nil, :red
      with_padding do
        lines.each { |l| say_status(l.length, l) }
      end
    end
  end

  def check_file_clashing
    say "Checking resource names errors..."
    everything = Dir["#{afc_path}/resources/**/**.jpg"]
    groups     = everything.group_by { |f| File.basename(f) }
    matches    = groups.select { |key, files| files.length > 1 }
    matches.each do |name, files|
      say_status name, files.join(', '), :red
    end
  end

  def check_encoding
    say "Checking encoding errors..."
    each_chapter do |chapter, path|
      open(path,"r:UTF-8").readlines().each do |line|
        next if todo? line
        unless valid_encoding line
          say "\nInvalid char at chapter #{chapter}, at line: \n"
          say line
          @ok = false
        end
      end
    end
  end

  def check_references
    say "Checking labels and references..."
    find_invalid_references(find_labels)
  end
  
  def verify(label, chapter)
    label = label.to_s
    if label.include? "_"
      say "Invalid label at chapter #{chapter}, it should not contain '_' char: #{label}"
    end
  end
  
  def find_labels
    labels = []
    each_chapter do |chapter, path|
      chapter_text = File.read(path)
      chapter_text.scan(/\[img[^\]]*label=(\S*)\]/m) do |label|
        verify(label[0], chapter)
        labels << label
      end
      chapter_text.scan(/\[code[^\]]*label=(\S*)\]/m) do |label|
        verify(label[0], chapter)
        labels << label
      end
      chapter_text.scan(/\[label\s+(\S*)\s*\]/) do |label|
        verify(label[0], chapter)
        labels << label
      end
      chapter_text.scan(/\[img\s+(\S+).*label=[\s\]].*/) do |path|
        label = Pathname.new(path[0]).basename.to_s
        labels << label
      end
    end
    labels.flatten.to_set
  end

  def find_invalid_references(labels)
    each_chapter do |chapter, path|
      lines = File.readlines(path)
      lines.each do |line|
        next if todo? line
        line.scan(/\[ref-label\s+(\S*)\s*\]|\[ref-code\s+(\S*)\s*\]/) do |ref|
          check_ref(labels, ref.compact.first, chapter, line)
        end
      end
    end
  end

  def todo?(line)
    line =~ TODO_MATCHER
  end

  def check_ref(labels, ref, chapter, line)
    unless labels.include? ref
      say "\nInvalid reference at chapter '#{chapter}', at line:"
      say line
    end
    if ref.include? '_'
      say "\nInvalid reference at chapter '#{chapter}', references should not contain '_' char, at line:"
      say line
    end
  end

  def valid_encoding(line)
    begin
      converter = Encoding::Converter.new("UTF-8", "ISO-8859-1")
      converter.convert line
    rescue
      return false
    end
    line.encoding.name == 'UTF-8' and line.valid_encoding?
  end

  def afc_path
    options.afc_path
  end
end

Jarvis.start